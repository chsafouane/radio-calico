# Multi-stage production Dockerfile for RadioCalico with nginx
FROM node:18-alpine AS app-builder

# Set working directory
WORKDIR /app

# Create non-root user for security
RUN addgroup -g 1001 -S nodejs && \
    adduser -S radiocalico -u 1001

# Copy package files first for better caching
COPY package*.json ./
RUN npm ci --only=production && npm cache clean --force

# Copy application files
COPY server-postgres.js ./server.js
COPY database ./database
COPY public ./public

# Set ownership
RUN chown -R radiocalico:nodejs /app

# Switch to non-root user
USER radiocalico

# Build stage for nginx
FROM nginx:alpine AS nginx-stage

# Copy nginx configuration
COPY nginx/nginx.conf /etc/nginx/nginx.conf

# Copy static files
COPY public /usr/share/nginx/html

# Create nginx user and set permissions
RUN chown -R nginx:nginx /usr/share/nginx/html

# Final application stage
FROM node:18-alpine AS app-stage

# Create non-root user
RUN addgroup -g 1001 -S nodejs && \
    adduser -S radiocalico -u 1001

WORKDIR /app

# Copy built application from builder stage
COPY --from=app-builder --chown=radiocalico:nodejs /app .

# Switch to non-root user
USER radiocalico

# Set production environment
ENV NODE_ENV=production

# Expose port
EXPOSE 3000

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
  CMD node -e "const http = require('http'); \
    const options = { host: 'localhost', port: 3000, path: '/health', timeout: 8000 }; \
    const req = http.request(options, (res) => process.exit(res.statusCode === 200 ? 0 : 1)); \
    req.on('error', () => process.exit(1)); \
    req.end();"

# Start the application
CMD ["node", "server.js"]